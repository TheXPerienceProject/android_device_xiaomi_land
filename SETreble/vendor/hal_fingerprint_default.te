#============= hal_fingerprint_default ==============
typeattribute hal_fingerprint_default binder_in_vendor_violators;
typeattribute hal_fingerprint_default socket_between_core_and_vendor_violators;
#typeattribute hal_fingerprint_default data_between_core_and_vendor_violators; seems not added xd

binder_use(hal_fingerprint_default)

allow hal_fingerprint_default firmware_file:file { read open getattr };
allow hal_fingerprint_default firmware_file:dir search;
allow hal_fingerprint_default sysfs:file rw_file_perms;
allow hal_fingerprint_default uhid_device:chr_file { ioctl open read write };
allow hal_fingerprint_default tee_device:chr_file rw_file_perms;
allow hal_fingerprint_default fpc_sysfs:file { ioctl open read write };
allow hal_fingerprint_default fpc_data_file:sock_file { read write };
allow hal_fingerprint_default system_prop:property_service { set };
allow hal_fingerprint_default property_socket:sock_file { open read write create unlink };
allow hal_fingerprint_default fingerprint_service:service_manager find;
allow hal_fingerprint_default gx_fpd_service:service_manager find;
allow hal_fingerprint_default init:unix_stream_socket connectto;

allow hal_fingerprint_default fuse:dir search;
allow hal_fingerprint_default fuse:file getattr;
allow hal_fingerprint_default mnt_user_file:dir search;
allow hal_fingerprint_default mnt_user_file:lnk_file read;

# Ignore all logging requests
dontaudit hal_fingerprint_default storage_file:dir search;

allow hal_fingerprint_default storage_file:lnk_file read;

allow hal_fingerprint_default servicemanager:binder { call transfer };
allow hal_fingerprint_default hwservicemanager:binder { call transfer };

add_service(hal_fingerprint_default, fingerprintd_custom_service);
r_dir_file(hal_fingerprint_default, firmware_file)
